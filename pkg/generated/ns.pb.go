// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.6.1
// source: ns.proto

package cellmanager

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type CellNeighbourRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellId string `protobuf:"bytes,1,opt,name=cellId,proto3" json:"cellId,omitempty"`
}

func (x *CellNeighbourRequest) Reset() {
	*x = CellNeighbourRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellNeighbourRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellNeighbourRequest) ProtoMessage() {}

func (x *CellNeighbourRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ns_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellNeighbourRequest.ProtoReflect.Descriptor instead.
func (*CellNeighbourRequest) Descriptor() ([]byte, []int) {
	return file_ns_proto_rawDescGZIP(), []int{0}
}

func (x *CellNeighbourRequest) GetCellId() string {
	if x != nil {
		return x.CellId
	}
	return ""
}

type CellChangeSizeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellId    string  `protobuf:"bytes,1,opt,name=cellId,proto3" json:"cellId,omitempty"`
	NewHeight float32 `protobuf:"fixed32,2,opt,name=newHeight,proto3" json:"newHeight,omitempty"`
	NewWidth  float32 `protobuf:"fixed32,3,opt,name=newWidth,proto3" json:"newWidth,omitempty"`
}

func (x *CellChangeSizeRequest) Reset() {
	*x = CellChangeSizeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellChangeSizeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellChangeSizeRequest) ProtoMessage() {}

func (x *CellChangeSizeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ns_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellChangeSizeRequest.ProtoReflect.Descriptor instead.
func (*CellChangeSizeRequest) Descriptor() ([]byte, []int) {
	return file_ns_proto_rawDescGZIP(), []int{1}
}

func (x *CellChangeSizeRequest) GetCellId() string {
	if x != nil {
		return x.CellId
	}
	return ""
}

func (x *CellChangeSizeRequest) GetNewHeight() float32 {
	if x != nil {
		return x.NewHeight
	}
	return 0
}

func (x *CellChangeSizeRequest) GetNewWidth() float32 {
	if x != nil {
		return x.NewWidth
	}
	return 0
}

type LockCellsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellId       []string `protobuf:"bytes,1,rep,name=cellId,proto3" json:"cellId,omitempty"`
	SenderCellId string   `protobuf:"bytes,2,opt,name=senderCellId,proto3" json:"senderCellId,omitempty"`
}

func (x *LockCellsRequest) Reset() {
	*x = LockCellsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LockCellsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockCellsRequest) ProtoMessage() {}

func (x *LockCellsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ns_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockCellsRequest.ProtoReflect.Descriptor instead.
func (*LockCellsRequest) Descriptor() ([]byte, []int) {
	return file_ns_proto_rawDescGZIP(), []int{2}
}

func (x *LockCellsRequest) GetCellId() []string {
	if x != nil {
		return x.CellId
	}
	return nil
}

func (x *LockCellsRequest) GetSenderCellId() string {
	if x != nil {
		return x.SenderCellId
	}
	return ""
}

type PlayerLeftCellRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip     string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Port   int32  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	CellId string `protobuf:"bytes,3,opt,name=cellId,proto3" json:"cellId,omitempty"`
}

func (x *PlayerLeftCellRequest) Reset() {
	*x = PlayerLeftCellRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerLeftCellRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerLeftCellRequest) ProtoMessage() {}

func (x *PlayerLeftCellRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ns_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerLeftCellRequest.ProtoReflect.Descriptor instead.
func (*PlayerLeftCellRequest) Descriptor() ([]byte, []int) {
	return file_ns_proto_rawDescGZIP(), []int{3}
}

func (x *PlayerLeftCellRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *PlayerLeftCellRequest) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *PlayerLeftCellRequest) GetCellId() string {
	if x != nil {
		return x.CellId
	}
	return ""
}

type ListCellsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListCellsRequest) Reset() {
	*x = ListCellsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCellsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCellsRequest) ProtoMessage() {}

func (x *ListCellsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ns_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCellsRequest.ProtoReflect.Descriptor instead.
func (*ListCellsRequest) Descriptor() ([]byte, []int) {
	return file_ns_proto_rawDescGZIP(), []int{4}
}

type ListPlayersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellId string `protobuf:"bytes,1,opt,name=cellId,proto3" json:"cellId,omitempty"`
}

func (x *ListPlayersRequest) Reset() {
	*x = ListPlayersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPlayersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPlayersRequest) ProtoMessage() {}

func (x *ListPlayersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ns_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPlayersRequest.ProtoReflect.Descriptor instead.
func (*ListPlayersRequest) Descriptor() ([]byte, []int) {
	return file_ns_proto_rawDescGZIP(), []int{5}
}

func (x *ListPlayersRequest) GetCellId() string {
	if x != nil {
		return x.CellId
	}
	return ""
}

type CellMasterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellId string `protobuf:"bytes,1,opt,name=cellId,proto3" json:"cellId,omitempty"`
}

func (x *CellMasterRequest) Reset() {
	*x = CellMasterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellMasterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellMasterRequest) ProtoMessage() {}

func (x *CellMasterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ns_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellMasterRequest.ProtoReflect.Descriptor instead.
func (*CellMasterRequest) Descriptor() ([]byte, []int) {
	return file_ns_proto_rawDescGZIP(), []int{6}
}

func (x *CellMasterRequest) GetCellId() string {
	if x != nil {
		return x.CellId
	}
	return ""
}

type CellMasterStatusReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WasUnregistered bool `protobuf:"varint,1,opt,name=wasUnregistered,proto3" json:"wasUnregistered,omitempty"`
}

func (x *CellMasterStatusReply) Reset() {
	*x = CellMasterStatusReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellMasterStatusReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellMasterStatusReply) ProtoMessage() {}

func (x *CellMasterStatusReply) ProtoReflect() protoreflect.Message {
	mi := &file_ns_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellMasterStatusReply.ProtoReflect.Descriptor instead.
func (*CellMasterStatusReply) Descriptor() ([]byte, []int) {
	return file_ns_proto_rawDescGZIP(), []int{7}
}

func (x *CellMasterStatusReply) GetWasUnregistered() bool {
	if x != nil {
		return x.WasUnregistered
	}
	return false
}

type PlayerStatusReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerLeft bool `protobuf:"varint,1,opt,name=playerLeft,proto3" json:"playerLeft,omitempty"`
}

func (x *PlayerStatusReply) Reset() {
	*x = PlayerStatusReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerStatusReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerStatusReply) ProtoMessage() {}

func (x *PlayerStatusReply) ProtoReflect() protoreflect.Message {
	mi := &file_ns_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerStatusReply.ProtoReflect.Descriptor instead.
func (*PlayerStatusReply) Descriptor() ([]byte, []int) {
	return file_ns_proto_rawDescGZIP(), []int{8}
}

func (x *PlayerStatusReply) GetPlayerLeft() bool {
	if x != nil {
		return x.PlayerLeft
	}
	return false
}

type CellRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellId string `protobuf:"bytes,1,opt,name=cellId,proto3" json:"cellId,omitempty"`
}

func (x *CellRequest) Reset() {
	*x = CellRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellRequest) ProtoMessage() {}

func (x *CellRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ns_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellRequest.ProtoReflect.Descriptor instead.
func (*CellRequest) Descriptor() ([]byte, []int) {
	return file_ns_proto_rawDescGZIP(), []int{9}
}

func (x *CellRequest) GetCellId() string {
	if x != nil {
		return x.CellId
	}
	return ""
}

type CellNeighboursReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellId []string `protobuf:"bytes,1,rep,name=cellId,proto3" json:"cellId,omitempty"`
}

func (x *CellNeighboursReply) Reset() {
	*x = CellNeighboursReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellNeighboursReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellNeighboursReply) ProtoMessage() {}

func (x *CellNeighboursReply) ProtoReflect() protoreflect.Message {
	mi := &file_ns_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellNeighboursReply.ProtoReflect.Descriptor instead.
func (*CellNeighboursReply) Descriptor() ([]byte, []int) {
	return file_ns_proto_rawDescGZIP(), []int{10}
}

func (x *CellNeighboursReply) GetCellId() []string {
	if x != nil {
		return x.CellId
	}
	return nil
}

type CellChangeStatusReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Succeeded bool `protobuf:"varint,1,opt,name=succeeded,proto3" json:"succeeded,omitempty"`
}

func (x *CellChangeStatusReply) Reset() {
	*x = CellChangeStatusReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellChangeStatusReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellChangeStatusReply) ProtoMessage() {}

func (x *CellChangeStatusReply) ProtoReflect() protoreflect.Message {
	mi := &file_ns_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellChangeStatusReply.ProtoReflect.Descriptor instead.
func (*CellChangeStatusReply) Descriptor() ([]byte, []int) {
	return file_ns_proto_rawDescGZIP(), []int{11}
}

func (x *CellChangeStatusReply) GetSucceeded() bool {
	if x != nil {
		return x.Succeeded
	}
	return false
}

type CellLockStatusReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Locked bool   `protobuf:"varint,1,opt,name=locked,proto3" json:"locked,omitempty"`
	Lockee string `protobuf:"bytes,2,opt,name=lockee,proto3" json:"lockee,omitempty"`
}

func (x *CellLockStatusReply) Reset() {
	*x = CellLockStatusReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellLockStatusReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellLockStatusReply) ProtoMessage() {}

func (x *CellLockStatusReply) ProtoReflect() protoreflect.Message {
	mi := &file_ns_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellLockStatusReply.ProtoReflect.Descriptor instead.
func (*CellLockStatusReply) Descriptor() ([]byte, []int) {
	return file_ns_proto_rawDescGZIP(), []int{12}
}

func (x *CellLockStatusReply) GetLocked() bool {
	if x != nil {
		return x.Locked
	}
	return false
}

func (x *CellLockStatusReply) GetLockee() string {
	if x != nil {
		return x.Lockee
	}
	return ""
}

type CellStatusReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WasPerformed bool `protobuf:"varint,1,opt,name=wasPerformed,proto3" json:"wasPerformed,omitempty"`
}

func (x *CellStatusReply) Reset() {
	*x = CellStatusReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellStatusReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellStatusReply) ProtoMessage() {}

func (x *CellStatusReply) ProtoReflect() protoreflect.Message {
	mi := &file_ns_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellStatusReply.ProtoReflect.Descriptor instead.
func (*CellStatusReply) Descriptor() ([]byte, []int) {
	return file_ns_proto_rawDescGZIP(), []int{13}
}

func (x *CellStatusReply) GetWasPerformed() bool {
	if x != nil {
		return x.WasPerformed
	}
	return false
}

type ListCellsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellId []string `protobuf:"bytes,1,rep,name=cellId,proto3" json:"cellId,omitempty"`
}

func (x *ListCellsReply) Reset() {
	*x = ListCellsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCellsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCellsReply) ProtoMessage() {}

func (x *ListCellsReply) ProtoReflect() protoreflect.Message {
	mi := &file_ns_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCellsReply.ProtoReflect.Descriptor instead.
func (*ListCellsReply) Descriptor() ([]byte, []int) {
	return file_ns_proto_rawDescGZIP(), []int{14}
}

func (x *ListCellsReply) GetCellId() []string {
	if x != nil {
		return x.CellId
	}
	return nil
}

type PlayersReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip   []string `protobuf:"bytes,1,rep,name=ip,proto3" json:"ip,omitempty"`
	Port []int32  `protobuf:"varint,2,rep,packed,name=port,proto3" json:"port,omitempty"`
}

func (x *PlayersReply) Reset() {
	*x = PlayersReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayersReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayersReply) ProtoMessage() {}

func (x *PlayersReply) ProtoReflect() protoreflect.Message {
	mi := &file_ns_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayersReply.ProtoReflect.Descriptor instead.
func (*PlayersReply) Descriptor() ([]byte, []int) {
	return file_ns_proto_rawDescGZIP(), []int{15}
}

func (x *PlayersReply) GetIp() []string {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *PlayersReply) GetPort() []int32 {
	if x != nil {
		return x.Port
	}
	return nil
}

type CellMasterReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip   string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Port int32  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *CellMasterReply) Reset() {
	*x = CellMasterReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellMasterReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellMasterReply) ProtoMessage() {}

func (x *CellMasterReply) ProtoReflect() protoreflect.Message {
	mi := &file_ns_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellMasterReply.ProtoReflect.Descriptor instead.
func (*CellMasterReply) Descriptor() ([]byte, []int) {
	return file_ns_proto_rawDescGZIP(), []int{16}
}

func (x *CellMasterReply) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *CellMasterReply) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

var File_ns_proto protoreflect.FileDescriptor

var file_ns_proto_rawDesc = []byte{
	0x0a, 0x08, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x63, 0x65, 0x6c, 0x6c,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x22, 0x2e, 0x0a, 0x14, 0x43, 0x65, 0x6c, 0x6c, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x22, 0x69, 0x0a, 0x15, 0x43, 0x65, 0x6c, 0x6c, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6e, 0x65, 0x77,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x57, 0x69, 0x64,
	0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x57, 0x69, 0x64,
	0x74, 0x68, 0x22, 0x4e, 0x0a, 0x10, 0x4c, 0x6f, 0x63, 0x6b, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x65, 0x6c, 0x6c,
	0x49, 0x64, 0x22, 0x53, 0x0a, 0x15, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74,
	0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x22, 0x12, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x65, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2c, 0x0a, 0x12, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x22, 0x2b, 0x0a, 0x11, 0x43, 0x65, 0x6c,
	0x6c, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x63, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x22, 0x41, 0x0a, 0x15, 0x43, 0x65, 0x6c, 0x6c, 0x4d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x28, 0x0a, 0x0f, 0x77, 0x61, 0x73, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x77, 0x61, 0x73, 0x55, 0x6e, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x22, 0x33, 0x0a, 0x11, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x22, 0x25,
	0x0a, 0x0b, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63,
	0x65, 0x6c, 0x6c, 0x49, 0x64, 0x22, 0x2d, 0x0a, 0x13, 0x43, 0x65, 0x6c, 0x6c, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x63, 0x65,
	0x6c, 0x6c, 0x49, 0x64, 0x22, 0x35, 0x0a, 0x15, 0x43, 0x65, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x22, 0x45, 0x0a, 0x13, 0x43,
	0x65, 0x6c, 0x6c, 0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x6b,
	0x65, 0x65, 0x22, 0x35, 0x0a, 0x0f, 0x43, 0x65, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x77, 0x61, 0x73, 0x50, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x77, 0x61, 0x73,
	0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x22, 0x28, 0x0a, 0x0e, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x65, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x63, 0x65, 0x6c,
	0x6c, 0x49, 0x64, 0x22, 0x32, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x35, 0x0a, 0x0f, 0x43, 0x65, 0x6c, 0x6c, 0x4d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x32, 0xab,
	0x07, 0x0a, 0x0b, 0x43, 0x65, 0x6c, 0x6c, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x46,
	0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x12, 0x18, 0x2e, 0x63,
	0x65, 0x6c, 0x6c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x65, 0x6c, 0x6c, 0x12, 0x18, 0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c,
	0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x65, 0x6c,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x49,
	0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x1d, 0x2e, 0x63, 0x65,
	0x6c, 0x6c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x65,
	0x6c, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x63, 0x65, 0x6c,
	0x6c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x65, 0x6c,
	0x6c, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x11, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x43, 0x65, 0x6c, 0x6c, 0x12, 0x1f,
	0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x19, 0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x11,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x4d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x1e, 0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x43, 0x65, 0x6c, 0x6c, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x43, 0x65, 0x6c, 0x6c, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x5c, 0x0a, 0x14, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43,
	0x65, 0x6c, 0x6c, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x63, 0x65, 0x6c, 0x6c,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x4d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x63, 0x65, 0x6c, 0x6c,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x4d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x56, 0x0a, 0x0e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x43, 0x65, 0x6c,
	0x6c, 0x12, 0x22, 0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x15, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x73,
	0x12, 0x21, 0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43,
	0x65, 0x6c, 0x6c, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x15, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x22, 0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43,
	0x65, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x09, 0x4c, 0x6f,
	0x63, 0x6b, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x1d, 0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0b, 0x55, 0x6e,
	0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x1d, 0x2e, 0x63, 0x65, 0x6c, 0x6c,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x43, 0x65, 0x6c, 0x6c,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x4c, 0x6f, 0x63, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ns_proto_rawDescOnce sync.Once
	file_ns_proto_rawDescData = file_ns_proto_rawDesc
)

func file_ns_proto_rawDescGZIP() []byte {
	file_ns_proto_rawDescOnce.Do(func() {
		file_ns_proto_rawDescData = protoimpl.X.CompressGZIP(file_ns_proto_rawDescData)
	})
	return file_ns_proto_rawDescData
}

var file_ns_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_ns_proto_goTypes = []interface{}{
	(*CellNeighbourRequest)(nil),  // 0: cellmanager.CellNeighbourRequest
	(*CellChangeSizeRequest)(nil), // 1: cellmanager.CellChangeSizeRequest
	(*LockCellsRequest)(nil),      // 2: cellmanager.LockCellsRequest
	(*PlayerLeftCellRequest)(nil), // 3: cellmanager.PlayerLeftCellRequest
	(*ListCellsRequest)(nil),      // 4: cellmanager.ListCellsRequest
	(*ListPlayersRequest)(nil),    // 5: cellmanager.ListPlayersRequest
	(*CellMasterRequest)(nil),     // 6: cellmanager.CellMasterRequest
	(*CellMasterStatusReply)(nil), // 7: cellmanager.CellMasterStatusReply
	(*PlayerStatusReply)(nil),     // 8: cellmanager.PlayerStatusReply
	(*CellRequest)(nil),           // 9: cellmanager.CellRequest
	(*CellNeighboursReply)(nil),   // 10: cellmanager.CellNeighboursReply
	(*CellChangeStatusReply)(nil), // 11: cellmanager.CellChangeStatusReply
	(*CellLockStatusReply)(nil),   // 12: cellmanager.CellLockStatusReply
	(*CellStatusReply)(nil),       // 13: cellmanager.CellStatusReply
	(*ListCellsReply)(nil),        // 14: cellmanager.ListCellsReply
	(*PlayersReply)(nil),          // 15: cellmanager.PlayersReply
	(*CellMasterReply)(nil),       // 16: cellmanager.CellMasterReply
}
var file_ns_proto_depIdxs = []int32{
	9,  // 0: cellmanager.CellManager.CreateCell:input_type -> cellmanager.CellRequest
	9,  // 1: cellmanager.CellManager.DeleteCell:input_type -> cellmanager.CellRequest
	4,  // 2: cellmanager.CellManager.ListCells:input_type -> cellmanager.ListCellsRequest
	5,  // 3: cellmanager.CellManager.ListPlayersInCell:input_type -> cellmanager.ListPlayersRequest
	6,  // 4: cellmanager.CellManager.RequestCellMaster:input_type -> cellmanager.CellMasterRequest
	6,  // 5: cellmanager.CellManager.UnregisterCellMaster:input_type -> cellmanager.CellMasterRequest
	3,  // 6: cellmanager.CellManager.PlayerLeftCell:input_type -> cellmanager.PlayerLeftCellRequest
	0,  // 7: cellmanager.CellManager.RequestCellNeighbours:input_type -> cellmanager.CellNeighbourRequest
	1,  // 8: cellmanager.CellManager.RequestCellSizeChange:input_type -> cellmanager.CellChangeSizeRequest
	2,  // 9: cellmanager.CellManager.LockCells:input_type -> cellmanager.LockCellsRequest
	2,  // 10: cellmanager.CellManager.UnlockCells:input_type -> cellmanager.LockCellsRequest
	13, // 11: cellmanager.CellManager.CreateCell:output_type -> cellmanager.CellStatusReply
	13, // 12: cellmanager.CellManager.DeleteCell:output_type -> cellmanager.CellStatusReply
	14, // 13: cellmanager.CellManager.ListCells:output_type -> cellmanager.ListCellsReply
	15, // 14: cellmanager.CellManager.ListPlayersInCell:output_type -> cellmanager.PlayersReply
	16, // 15: cellmanager.CellManager.RequestCellMaster:output_type -> cellmanager.CellMasterReply
	7,  // 16: cellmanager.CellManager.UnregisterCellMaster:output_type -> cellmanager.CellMasterStatusReply
	8,  // 17: cellmanager.CellManager.PlayerLeftCell:output_type -> cellmanager.PlayerStatusReply
	10, // 18: cellmanager.CellManager.RequestCellNeighbours:output_type -> cellmanager.CellNeighboursReply
	11, // 19: cellmanager.CellManager.RequestCellSizeChange:output_type -> cellmanager.CellChangeStatusReply
	12, // 20: cellmanager.CellManager.LockCells:output_type -> cellmanager.CellLockStatusReply
	12, // 21: cellmanager.CellManager.UnlockCells:output_type -> cellmanager.CellLockStatusReply
	11, // [11:22] is the sub-list for method output_type
	0,  // [0:11] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_ns_proto_init() }
func file_ns_proto_init() {
	if File_ns_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ns_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellNeighbourRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellChangeSizeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LockCellsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerLeftCellRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCellsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPlayersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellMasterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellMasterStatusReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerStatusReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellNeighboursReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellChangeStatusReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellLockStatusReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellStatusReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCellsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayersReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellMasterReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ns_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ns_proto_goTypes,
		DependencyIndexes: file_ns_proto_depIdxs,
		MessageInfos:      file_ns_proto_msgTypes,
	}.Build()
	File_ns_proto = out.File
	file_ns_proto_rawDesc = nil
	file_ns_proto_goTypes = nil
	file_ns_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CellManagerClient is the client API for CellManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CellManagerClient interface {
	CreateCell(ctx context.Context, in *CellRequest, opts ...grpc.CallOption) (*CellStatusReply, error)
	DeleteCell(ctx context.Context, in *CellRequest, opts ...grpc.CallOption) (*CellStatusReply, error)
	ListCells(ctx context.Context, in *ListCellsRequest, opts ...grpc.CallOption) (*ListCellsReply, error)
	ListPlayersInCell(ctx context.Context, in *ListPlayersRequest, opts ...grpc.CallOption) (*PlayersReply, error)
	RequestCellMaster(ctx context.Context, in *CellMasterRequest, opts ...grpc.CallOption) (*CellMasterReply, error)
	UnregisterCellMaster(ctx context.Context, in *CellMasterRequest, opts ...grpc.CallOption) (*CellMasterStatusReply, error)
	PlayerLeftCell(ctx context.Context, in *PlayerLeftCellRequest, opts ...grpc.CallOption) (*PlayerStatusReply, error)
	RequestCellNeighbours(ctx context.Context, in *CellNeighbourRequest, opts ...grpc.CallOption) (*CellNeighboursReply, error)
	RequestCellSizeChange(ctx context.Context, in *CellChangeSizeRequest, opts ...grpc.CallOption) (*CellChangeStatusReply, error)
	LockCells(ctx context.Context, in *LockCellsRequest, opts ...grpc.CallOption) (*CellLockStatusReply, error)
	UnlockCells(ctx context.Context, in *LockCellsRequest, opts ...grpc.CallOption) (*CellLockStatusReply, error)
}

type cellManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewCellManagerClient(cc grpc.ClientConnInterface) CellManagerClient {
	return &cellManagerClient{cc}
}

func (c *cellManagerClient) CreateCell(ctx context.Context, in *CellRequest, opts ...grpc.CallOption) (*CellStatusReply, error) {
	out := new(CellStatusReply)
	err := c.cc.Invoke(ctx, "/cellmanager.CellManager/CreateCell", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cellManagerClient) DeleteCell(ctx context.Context, in *CellRequest, opts ...grpc.CallOption) (*CellStatusReply, error) {
	out := new(CellStatusReply)
	err := c.cc.Invoke(ctx, "/cellmanager.CellManager/DeleteCell", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cellManagerClient) ListCells(ctx context.Context, in *ListCellsRequest, opts ...grpc.CallOption) (*ListCellsReply, error) {
	out := new(ListCellsReply)
	err := c.cc.Invoke(ctx, "/cellmanager.CellManager/ListCells", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cellManagerClient) ListPlayersInCell(ctx context.Context, in *ListPlayersRequest, opts ...grpc.CallOption) (*PlayersReply, error) {
	out := new(PlayersReply)
	err := c.cc.Invoke(ctx, "/cellmanager.CellManager/ListPlayersInCell", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cellManagerClient) RequestCellMaster(ctx context.Context, in *CellMasterRequest, opts ...grpc.CallOption) (*CellMasterReply, error) {
	out := new(CellMasterReply)
	err := c.cc.Invoke(ctx, "/cellmanager.CellManager/RequestCellMaster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cellManagerClient) UnregisterCellMaster(ctx context.Context, in *CellMasterRequest, opts ...grpc.CallOption) (*CellMasterStatusReply, error) {
	out := new(CellMasterStatusReply)
	err := c.cc.Invoke(ctx, "/cellmanager.CellManager/UnregisterCellMaster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cellManagerClient) PlayerLeftCell(ctx context.Context, in *PlayerLeftCellRequest, opts ...grpc.CallOption) (*PlayerStatusReply, error) {
	out := new(PlayerStatusReply)
	err := c.cc.Invoke(ctx, "/cellmanager.CellManager/PlayerLeftCell", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cellManagerClient) RequestCellNeighbours(ctx context.Context, in *CellNeighbourRequest, opts ...grpc.CallOption) (*CellNeighboursReply, error) {
	out := new(CellNeighboursReply)
	err := c.cc.Invoke(ctx, "/cellmanager.CellManager/RequestCellNeighbours", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cellManagerClient) RequestCellSizeChange(ctx context.Context, in *CellChangeSizeRequest, opts ...grpc.CallOption) (*CellChangeStatusReply, error) {
	out := new(CellChangeStatusReply)
	err := c.cc.Invoke(ctx, "/cellmanager.CellManager/RequestCellSizeChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cellManagerClient) LockCells(ctx context.Context, in *LockCellsRequest, opts ...grpc.CallOption) (*CellLockStatusReply, error) {
	out := new(CellLockStatusReply)
	err := c.cc.Invoke(ctx, "/cellmanager.CellManager/LockCells", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cellManagerClient) UnlockCells(ctx context.Context, in *LockCellsRequest, opts ...grpc.CallOption) (*CellLockStatusReply, error) {
	out := new(CellLockStatusReply)
	err := c.cc.Invoke(ctx, "/cellmanager.CellManager/UnlockCells", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CellManagerServer is the server API for CellManager service.
type CellManagerServer interface {
	CreateCell(context.Context, *CellRequest) (*CellStatusReply, error)
	DeleteCell(context.Context, *CellRequest) (*CellStatusReply, error)
	ListCells(context.Context, *ListCellsRequest) (*ListCellsReply, error)
	ListPlayersInCell(context.Context, *ListPlayersRequest) (*PlayersReply, error)
	RequestCellMaster(context.Context, *CellMasterRequest) (*CellMasterReply, error)
	UnregisterCellMaster(context.Context, *CellMasterRequest) (*CellMasterStatusReply, error)
	PlayerLeftCell(context.Context, *PlayerLeftCellRequest) (*PlayerStatusReply, error)
	RequestCellNeighbours(context.Context, *CellNeighbourRequest) (*CellNeighboursReply, error)
	RequestCellSizeChange(context.Context, *CellChangeSizeRequest) (*CellChangeStatusReply, error)
	LockCells(context.Context, *LockCellsRequest) (*CellLockStatusReply, error)
	UnlockCells(context.Context, *LockCellsRequest) (*CellLockStatusReply, error)
}

// UnimplementedCellManagerServer can be embedded to have forward compatible implementations.
type UnimplementedCellManagerServer struct {
}

func (*UnimplementedCellManagerServer) CreateCell(context.Context, *CellRequest) (*CellStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCell not implemented")
}
func (*UnimplementedCellManagerServer) DeleteCell(context.Context, *CellRequest) (*CellStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCell not implemented")
}
func (*UnimplementedCellManagerServer) ListCells(context.Context, *ListCellsRequest) (*ListCellsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCells not implemented")
}
func (*UnimplementedCellManagerServer) ListPlayersInCell(context.Context, *ListPlayersRequest) (*PlayersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPlayersInCell not implemented")
}
func (*UnimplementedCellManagerServer) RequestCellMaster(context.Context, *CellMasterRequest) (*CellMasterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestCellMaster not implemented")
}
func (*UnimplementedCellManagerServer) UnregisterCellMaster(context.Context, *CellMasterRequest) (*CellMasterStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterCellMaster not implemented")
}
func (*UnimplementedCellManagerServer) PlayerLeftCell(context.Context, *PlayerLeftCellRequest) (*PlayerStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayerLeftCell not implemented")
}
func (*UnimplementedCellManagerServer) RequestCellNeighbours(context.Context, *CellNeighbourRequest) (*CellNeighboursReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestCellNeighbours not implemented")
}
func (*UnimplementedCellManagerServer) RequestCellSizeChange(context.Context, *CellChangeSizeRequest) (*CellChangeStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestCellSizeChange not implemented")
}
func (*UnimplementedCellManagerServer) LockCells(context.Context, *LockCellsRequest) (*CellLockStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockCells not implemented")
}
func (*UnimplementedCellManagerServer) UnlockCells(context.Context, *LockCellsRequest) (*CellLockStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlockCells not implemented")
}

func RegisterCellManagerServer(s *grpc.Server, srv CellManagerServer) {
	s.RegisterService(&_CellManager_serviceDesc, srv)
}

func _CellManager_CreateCell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CellManagerServer).CreateCell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cellmanager.CellManager/CreateCell",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CellManagerServer).CreateCell(ctx, req.(*CellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CellManager_DeleteCell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CellManagerServer).DeleteCell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cellmanager.CellManager/DeleteCell",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CellManagerServer).DeleteCell(ctx, req.(*CellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CellManager_ListCells_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCellsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CellManagerServer).ListCells(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cellmanager.CellManager/ListCells",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CellManagerServer).ListCells(ctx, req.(*ListCellsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CellManager_ListPlayersInCell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPlayersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CellManagerServer).ListPlayersInCell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cellmanager.CellManager/ListPlayersInCell",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CellManagerServer).ListPlayersInCell(ctx, req.(*ListPlayersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CellManager_RequestCellMaster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CellMasterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CellManagerServer).RequestCellMaster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cellmanager.CellManager/RequestCellMaster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CellManagerServer).RequestCellMaster(ctx, req.(*CellMasterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CellManager_UnregisterCellMaster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CellMasterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CellManagerServer).UnregisterCellMaster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cellmanager.CellManager/UnregisterCellMaster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CellManagerServer).UnregisterCellMaster(ctx, req.(*CellMasterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CellManager_PlayerLeftCell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerLeftCellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CellManagerServer).PlayerLeftCell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cellmanager.CellManager/PlayerLeftCell",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CellManagerServer).PlayerLeftCell(ctx, req.(*PlayerLeftCellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CellManager_RequestCellNeighbours_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CellNeighbourRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CellManagerServer).RequestCellNeighbours(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cellmanager.CellManager/RequestCellNeighbours",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CellManagerServer).RequestCellNeighbours(ctx, req.(*CellNeighbourRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CellManager_RequestCellSizeChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CellChangeSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CellManagerServer).RequestCellSizeChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cellmanager.CellManager/RequestCellSizeChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CellManagerServer).RequestCellSizeChange(ctx, req.(*CellChangeSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CellManager_LockCells_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockCellsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CellManagerServer).LockCells(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cellmanager.CellManager/LockCells",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CellManagerServer).LockCells(ctx, req.(*LockCellsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CellManager_UnlockCells_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockCellsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CellManagerServer).UnlockCells(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cellmanager.CellManager/UnlockCells",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CellManagerServer).UnlockCells(ctx, req.(*LockCellsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CellManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cellmanager.CellManager",
	HandlerType: (*CellManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCell",
			Handler:    _CellManager_CreateCell_Handler,
		},
		{
			MethodName: "DeleteCell",
			Handler:    _CellManager_DeleteCell_Handler,
		},
		{
			MethodName: "ListCells",
			Handler:    _CellManager_ListCells_Handler,
		},
		{
			MethodName: "ListPlayersInCell",
			Handler:    _CellManager_ListPlayersInCell_Handler,
		},
		{
			MethodName: "RequestCellMaster",
			Handler:    _CellManager_RequestCellMaster_Handler,
		},
		{
			MethodName: "UnregisterCellMaster",
			Handler:    _CellManager_UnregisterCellMaster_Handler,
		},
		{
			MethodName: "PlayerLeftCell",
			Handler:    _CellManager_PlayerLeftCell_Handler,
		},
		{
			MethodName: "RequestCellNeighbours",
			Handler:    _CellManager_RequestCellNeighbours_Handler,
		},
		{
			MethodName: "RequestCellSizeChange",
			Handler:    _CellManager_RequestCellSizeChange_Handler,
		},
		{
			MethodName: "LockCells",
			Handler:    _CellManager_LockCells_Handler,
		},
		{
			MethodName: "UnlockCells",
			Handler:    _CellManager_UnlockCells_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ns.proto",
}
